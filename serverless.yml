service: reto-indra

provider:
  name: aws
  runtime: nodejs18.x
  region: sa-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    SWAPI_URL: https://swapi.py4e.com/api
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  list:
    handler: src/presentation/getPeoplesHandler.getPeoplesHandler
    events:
      - httpApi: GET /peoples

  get:
    handler: src/presentation/getPeopleHandler.getPeopleHandler
    events:
      - httpApi: GET /peoples/{id}

  create:
    handler: src/presentation/postPeopleHandler.postPeopleHandler
    events:
      - httpApi: POST /peoples

  # retrieveCardData:
  #   handler: src/presentation/retrieveCardDataHandler.retrieveCardDataHandler
  #   events:
  #     - httpApi: POST /retrieveCardData
  #   vpc:
  #     securityGroupIds:
  #       - !GetAtt MyLambdaSecurityGroup.GroupId
  #     subnetIds:
  #       - !Ref MySubnet

resources:
  Resources:

    SwapiDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        GroupDescription: "INDRA - Reto t√©cnico"
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
  esbuild:
    bundle: true
    minify: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true

  

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline